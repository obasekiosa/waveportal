{"version":3,"sources":["App.js","index.js"],"names":["App","useState","currentAccount","setCurrentAccount","allWaves","setAllWaves","contractABI","abi","contractAddress","getAllWaves","a","window","ethereum","provider","ethers","providers","Web3Provider","signer","getSigner","wavePortalContract","Contract","waves","wavesCleaned","map","wave","address","waver","timestamp","Date","message","console","log","useEffect","onNewWave","from","prevState","on","off","getTotalWaves","count","toNumber","gasLimit","waveTxn","hash","wait","checkIfWalletIsConnected","request","method","accounts","length","account","connectWallet","alert","className","role","aria-label","onClick","index","key","style","backgroundColor","marginTop","padding","toString","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.2be9422d.chunk.js","sourcesContent":["import React, {useEffect, useState} from \"react\";\nimport { ethers } from \"ethers\";\nimport './App.css';\nimport abi from \"./utils/wavePortal.json\";\n\n\n\nexport default function App() {\n\n  const [currentAccount, setCurrentAccount] = useState(\"\");\n\n  const [allWaves, setAllWaves] = useState([]);\n\n  const contractABI = abi.abi;\n  const contractAddress = \"0x3b9e7E592E72e436b2141AFAE8A71fdC1272B8af\";\n\n  const getAllWaves = async () => {\n    try {\n      const { ethereum } = window;\n      if (ethereum) {\n        const provider = new ethers.providers.Web3Provider(ethereum);\n        const signer = provider.getSigner();\n        const wavePortalContract = new ethers.Contract(contractAddress, contractABI, signer);\n\n        const waves = await wavePortalContract.getAllWaves();\n\n        let wavesCleaned = waves.map(wave => {\n          return {\n            address: wave.waver,\n            timestamp: new Date(wave.timestamp * 1000),\n            message: wave.message\n          };\n        });\n\n        setAllWaves(wavesCleaned);\n      } else {\n        console.log(\"Ethereum object doesn't exist!\")\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n\n  useEffect(() => {\n    let wavePortalContract;\n\n    const onNewWave = (from, timestamp, message) => {\n      console.log(\"NewWave\", from, timestamp, message);\n      setAllWaves(prevState => [\n        ...prevState,\n        {\n          address: from,\n          timestamp: new Date(timestamp * 1000),\n          message: message,\n        },\n      ]);\n    };\n\n    if (window.ethereum) {\n      const provider = new ethers.providers.Web3Provider(window.ethereum);\n      const signer = provider.getSigner();\n\n      wavePortalContract = new ethers.Contract(contractAddress, contractABI, signer);\n      wavePortalContract.on(\"NewWave\", onNewWave);\n    }\n\n    return () => {\n      if (wavePortalContract) {\n        wavePortalContract.off(\"NewWave\", onNewWave);\n      }\n    };\n  }, []);\n\n\n  const wave = async () => {\n    try {\n      const { ethereum } = window;\n\n      if (ethereum) {\n        const provider = new ethers.providers.Web3Provider(ethereum);\n        const signer = provider.getSigner();\n        const wavePortalContract = new ethers.Contract(contractAddress, contractABI, signer);\n\n        let count = await wavePortalContract.getTotalWaves();\n        console.log(\"Retrieved total wave count...\", count.toNumber());\n\n        const waveTxn = await wavePortalContract.wave(\"No Morty shhzzz\", {gasLimit: 300_000});\n        console.log(\"Mining...\", waveTxn.hash);\n\n        await waveTxn.wait();\n        console.log(\"Mined -- \", waveTxn.hash);\n\n        count = await wavePortalContract.getTotalWaves();\n        console.log(\"Retrieved total wave count...\", count.toNumber());\n      } else {\n        console.log(\"Ethereum object doesn't exist!\");\n      }\n    } catch (error) {\n      console.log(error)\n    }\n  };\n\n  const checkIfWalletIsConnected = async () => {\n    try {\n      const { ethereum } = window;\n\n      if (!ethereum) {\n        console.log(\"Make sure you have metamask!\");\n        return;\n      } else {\n        console.log(\"We have the ethereum object\", ethereum);\n      }\n\n      \n      const accounts = await ethereum.request({ method: \"eth_accounts\" });\n\n      if (accounts.length !== 0) {\n        const account = accounts[0];\n        console.log(\"Found an authorized account:\", account);\n        setCurrentAccount(account);\n        getAllWaves();\n      } else {\n        console.log(\"No authorized account found\")\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n\n  const connectWallet = async () => {\n    try {\n      const { ethereum } = window;\n\n      if (!ethereum) {\n        alert(\"Get MetaMask!\");\n        return;\n      }\n\n      const accounts = await ethereum.request({ method: \"eth_requestAccounts\" });\n\n      console.log(\"Connected\", accounts[0]);\n      setCurrentAccount(accounts[0]);\n      getAllWaves();\n    } catch (error) {\n      console.log(error)\n    }\n  };\n\n  useEffect(() => {\n    checkIfWalletIsConnected();\n  }, []);\n  \n  return (\n    <div className=\"mainContainer\">\n\n      <div className=\"dataContainer\">\n        <div className=\"header\">\n          <span role=\"img\" aria-label=\"wave emoji\">ðŸ‘‹</span> Hey there!\n        </div>\n\n        <div className=\"bio\">\n          Connect your Ethereum wallet and wave at me!\n        </div>\n\n        <button className=\"waveButton\" onClick={wave}>\n          Wave at Me\n        </button>\n\n        {!currentAccount && (\n          <button className=\"waveButton\" onClick={connectWallet}>\n            Connect Wallet\n          </button>\n        )}\n\n        {allWaves.map((wave, index) => {\n          return (\n            <div key={index} style={{ backgroundColor: \"OldLace\", marginTop: \"16px\", padding: \"8px\" }}>\n              <div>Address: {wave.address}</div>\n              <div>Time: {wave.timestamp.toString()}</div>\n              <div>Message: {wave.message}</div>\n            </div>)\n        })}\n      </div>\n    </div>\n  );\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}